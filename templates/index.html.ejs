<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>LoopBack API Explorer</title>
  <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
  <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
  <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
  <style>
    html {
      box-sizing: border-box;
      overflow: -moz-scrollbars-vertical;
      overflow-y: scroll;
    }

    *,
    *:before,
    *:after {
      box-sizing: inherit;
    }

    body {
      margin: 0;
      background: #fafafa;
    }

    #session-header {
      position: absolute;
      top: 0;
      right: 2em;
      padding: 2em;
    }

    #session-header form {
      display: flex;
      flex-direction: column;
    }

    #session-header input {
      min-width: 250px;
    }

    #session-header .btn.authorize.locked {
      color: #f93e3e;
      border-color: #f93e3e;
    }
  </style>
</head>

<body>
  <div id="session-header" class="swagger-ui">
    <form id="session-form">
      <label for="session">SESSION</label>
      <input id="session" type="text" placeholder="id" required>
      <button id="set-session" class="btn authorize" type="submit">
        Set Session
      </button>
    </form>
  </div>

  <div id="swagger-ui"></div>

  <script src="./swagger-ui-bundle.js"> </script>
  <script src="./swagger-ui-standalone-preset.js"> </script>
  <script>
    window.onload = function () {

      // Add funcionality to specify SESSION header
      let sessionId = '';
      let activeSession = false;

      document.getElementById('session-form').addEventListener('submit',
        (e) => {
          e.preventDefault();
        });

      const sessionHandler = (e) => {
        let sessionInput = document.getElementById('session');

        if (!activeSession && sessionInput.validity.valid) {
          sessionId = sessionInput.value;
          sessionInput.type = 'password';
          sessionInput.disabled = true;
          e.target.innerHTML = 'Remove Session';
          activeSession = true;
          e.target.classList.add('locked');
        } else {
          sessionId = '';
          sessionInput.value = '';
          sessionInput.type = 'text';
          sessionInput.disabled = false;
          e.target.innerHTML = 'Set Session';
          activeSession = false;
          e.target.classList.remove('locked');
        }
      };

      document.getElementById('set-session').addEventListener('click',
        sessionHandler, {passive: false});

      // Build a system
      const ui = SwaggerUIBundle({
        url: '<%- openApiSpecUrl %>',
        dom_id: '#swagger-ui',
        deepLinking: true,
        filter: true,
        defaultModelsExpandDepth: 0,
        defaultModelExpandDepth: 0,
        requestInterceptor: (req) => {
          if (! req.loadSpec) {
              // Add the header to "try it out" calls but not spec fetches
              req.headers.SESSION = sessionId;
          }
          return req;
        },
        presets: [
          SwaggerUIBundle.presets.apis,
          // SwaggerUIStandalonePreset
          SwaggerUIStandalonePreset.slice(1) // Disable the top bar
        ],
        plugins: [
          SwaggerUIBundle.plugins.DownloadUrl
        ],
        layout: 'StandaloneLayout'

      })

      window.ui = ui
    }
  </script>
</body>

</html>
